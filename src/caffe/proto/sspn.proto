syntax = "proto2";

package caffe;

message Grammar {
  message Symbol {
    enum Type {
      Terminal = 0;
      Nonterminal = 1;
    }

    // the ID of the symbol; necessary for the productions to reference symbols efficiently
    required int32 id = 1;

    // the optional name of this symbol (very useful for understanding the grammar)
    optional string name = 2 [default = ''];

    required Type type = 3;
  }

  // a production in this grammar (looks like A -> B1,B2,...,Bk)
  message Production {
    required int32 id = 1;
    optional string name = 2 [default = ''];

    // the head symbol (A) and body (B1, ... Bk) of this production
    required Symbol.id head = 3;
    repeated Symbol.id body = 4;
  }

  // the list of symbols and productions in the grammar
  repeated Symbol symbols = 1;
  repeated Production productions = 2;

  // the weights that parameterize this grammar
  repeated float weights = 3 [packed = true];
}

